/*---------- Helper Start ----------*/
@mixin transition($attributes...) {
  transition         : #{$attributes};
  -moz-transition    : #{$attributes}; /*  Firefox */
  -webkit-transition : #{$attributes}; /*  Safari and Chrome */
  -ms-transition     : #{$attributes}; /*  ie */
  -o-transition      : #{$attributes}; /*  Opera */
}

@mixin transition-duration($time) {//miliseconds, ex: 0.5s
  -ms-transition-duration: $time;
  -moz-transition-duration: $time;
  -webkit-transition-duration: $time;
  transition-duration: $time;
}

@mixin transition-delay($time) {//miliseconds, ex: 0.5s
  -ms-transition-delay: $time;
  -moz-transition-delay: $time;
  -webkit-transition-delay: $time;
  transition-delay: $time;
}

@mixin animation($attributes...) {//name
  -ms-animation: $attributes;
  -moz-animation: $attributes;
  -webkit-animation: $attributes;
  animation: $attributes;
}

@mixin animation-delay($time) {//miliseconds, ex: 0.5s
  -ms-animation-delay: $time;
  -moz-animation-delay: $time;
  -webkit-animation-delay: $time;
  animation-delay: $time;
}

@mixin animation-duration($time) {//miliseconds, ex: 0.5s
  -ms-animation-duration: $time;
  -moz-animation-duration: $time;
  -webkit-animation-duration: $time;
  animation-duration: $time;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content; 
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  } 
}

@mixin uncontain {
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}

.uncontain{
  @include uncontain;
}

@mixin opacity($percent) {
  opacity: $percent;
  -moz-opacity: $percent;
  @if $percent == 1 {
    /* do nothing */
  } @else {
    filter: alpha(opacity=$percent * 100);
  }
}

@mixin displayFlex {
	display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
	display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
	display: -ms-flexbox;      /* TWEENER - IE 10 */
	display: -webkit-flex;     /* NEW - Chrome */
	display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
	// @include prefixer('flex-wrap', 'wrap');
}

@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

@mixin vcenter {
    & {
        @include displayFlex;
        @include prefixer('flex-direction', 'column');
        @include prefixer('justify-content', 'center');
    }
}

@mixin vcenter-fallback {
    & {
        position: absolute;
        top: 50%;
        left: 50%;
        @include transform(translate(-50%,-50%));
    }
}

@mixin transform($attributes...) {
  transform: #{$attributes};
  -webkit-transform: #{$attributes};
  -moz-transform:    #{$attributes};
  -ms-transform:     #{$attributes};
  -o-transform:      #{$attributes};
}

@mixin transform-origin($attributes...) {
  transform-origin: #{$attributes};
  -webkit-transform-origin: #{$attributes};
  -moz-transform-origin:    #{$attributes};
  -ms-transform-origin:     #{$attributes};
  -o-transform-origin:      #{$attributes};
}

@mixin transform-style($attributes...) {
  transform-style: #{$attributes};
  -webkit-transform-style: #{$attributes};
  -moz-transform-style:    #{$attributes};
  -ms-transform-style:     #{$attributes};
  -o-transform-style:      #{$attributes};
}

@mixin backface-visibility($attributes...) {
  backface-visibility: #{$attributes};
  -webkit-backface-visibility: #{$attributes};
  -moz-backface-visibility:    #{$attributes};
  -ms-backface-visibility:     #{$attributes};
  -o-backface-visibility:      #{$attributes};
}

@mixin calc($property, $expression) { 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 
} 

@mixin center-text-box {
  position: relative;
  top: 50%;
  @include transform(translateY(-50%));
}

@mixin content-box {
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  -ms-box-sizing: content-box;
  box-sizing: content-box;
}

@mixin rotate($deg) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg); 
  -o-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin font-face($family,$fileName,$isIcon:'', $style: normal,$weight: normal) {
  // $fontVTEXExtension: "";
  $fontVTEXExtension: ".css";
  $hash: "";
  @font-face {
    font-family: $family;
    @if $isIcon == 'icon' {
      src:url('#{$assetsURL + $fileName}.woff2#{$fontVTEXExtension + $hash}') format('woff2'), // standards
          url('#{$assetsURL + $fileName}.woff#{$fontVTEXExtension + $hash}') format('woff'), // standards
          url('#{$assetsURL + $fileName}.ttf#{$fontVTEXExtension + $hash}') format('truetype'), // truetype
          url('#{$assetsURL + $fileName}.svg#{$fontVTEXExtension + $hash}') format('svg'); // legacy iOS
    }
    @else{
      src:url('#{$assetsURL + $fileName}.woff2#{$fontVTEXExtension + $hash}') format('woff2'), // standards
          url('#{$assetsURL + $fileName}.woff#{$fontVTEXExtension + $hash}') format('woff'), // standards
          url('#{$assetsURL + $fileName}.ttf#{$fontVTEXExtension + $hash}') format('truetype'); // standards
    }

    font-style: $style;
    font-weight: $weight;
  }
}

@mixin font-smoothing($value) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin clear-box {
  &:after {
    display: block;
    content:"";
    width: 0;
    height: 0;
    position: relative;
    background: transparent;
    clear: both;
  }
}

@mixin placeholder ($plFontSize , $plcolor , $transform , $opacity , $weight) {
  &::-webkit-input-placeholder {font-size:$plFontSize; color:$plcolor; text-transform:$transform; opacity:$opacity; font-weight:$weight}
  &:-moz-placeholder           {font-size:$plFontSize; color:$plcolor; text-transform:$transform; opacity:$opacity; font-weight:$weight}
  &::-moz-placeholder          {font-size:$plFontSize; color:$plcolor; text-transform:$transform; opacity:$opacity; font-weight:$weight}
  &:-ms-input-placeholder      {font-size:$plFontSize; color:$plcolor; text-transform:$transform; opacity:$opacity; font-weight:$weight}
}

@mixin placeholder-color($color) {
  &::-webkit-input-placeholder {color: $color;text-transform: uppercase;}
  &:-moz-placeholder { color: $color;opacity:  1;text-transform: uppercase;}
  &::-moz-placeholder { color: $color;opacity:  1;text-transform: uppercase;}
  &:-ms-input-placeholder { color: $color; text-transform: uppercase; }
}
@mixin placeholder-font-size($size) {
  &::-webkit-input-placeholder { font-size: $size; }
  &:-moz-placeholder { font-size: $size; }
  &::-moz-placeholder { font-size: $size; }
  &:-ms-input-placeholder { font-size: $size; }
}

@mixin placeholder-focus{
  &:focus::-webkit-input-placeholder { color:transparent; }
  &:focus:-moz-placeholder { color:transparent; }
  &:focus::-moz-placeholder { color:transparent; }
  &:focus:-ms-input-placeholder { color:transparent; }
}

@mixin ruler($position: '',$color: $lightGrey){
  @if $position != '' {
    border-#{$position}: 1px solid $color;
  } @else {
    border: 1px solid $color;
  }
}

@mixin clean-input-appearance{
  -webkit-appearance: none;
  -moz-appearance:    none;
  appearance:         none;
  border-radius:0;
  outline: none;
}

@mixin percentage-height($height) {
    &:after {
        content: "";
        display: block;
        width: 100%;
        position: relative;
        height: 0;
        padding-bottom: $height;
        overflow: hidden;
    }
}

/* Shapes */
@mixin circle($size) {
  width: $size;
  height: $size;
  background: #bebcbb;
  -moz-border-radius: $size/2;
  -webkit-border-radius: $size/2;
  border-radius: $size/2;
}

@mixin triangle-right($size, $color) {
  width: 0;
  height: 0;
  border-top: $size solid transparent;
  border-left: $size solid $color;
  border-bottom: $size solid transparent;
}

@mixin triangle-left($size, $color) {
  width: 0;
  height: 0;
  border-top: $size solid transparent;
  border-right: $size solid $color;
  border-bottom: $size solid transparent;
}

@mixin arrow-left($size, $color, $borderSize, $backgroundColor) {
  @include triangle-left($size, $color);
  &:after {
    content: '';
    position: absolute;
    display: block;
    left: $borderSize;
    top: $borderSize - $size;
    @include triangle-left($size - $borderSize, $backgroundColor);
  }
}

@mixin arrow-right($size, $color, $borderSize, $backgroundColor) {
  @include triangle-right($size, $color);
  &:after {
    content: '';
    position: absolute;
    display: block;
    right: $borderSize;
    top: $borderSize - $size;
    @include triangle-right($size - $borderSize, $backgroundColor);
  }
}

// Shapes
@mixin triUp($color,$size){
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
}
@mixin triDown($color,$size){
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
}
@mixin triLeft($color,$size){
    width: 0;
    height: 0;
    border-right: $size solid $color;
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
}
@mixin triRight($color,$size){
    width: 0;
    height: 0;
    border-left: $size solid $color;
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
}


@mixin mediaQuery($constraint, $viewport1, $viewport2: null) {
  @if $constraint == $min {
    @media screen and ($min: $viewport1) {
      @content;
    }
  } @else if $constraint == $max {
    @media screen and ($max: $viewport1) {
      @content;
    }
  } @else {
    @media screen and ($min: $viewport1) and ($max: $viewport2) {
      @content;
    }
  }
}
@mixin query-small {
    @include mediaQuery($max, ($mediumScreen - 1)) {
        @content;
    }
}
@mixin query-medium-down {
    @include mediaQuery($max, ($largeScreen - 1)) {
        @content;
    }
}
@mixin query-medium {
    @include mediaQuery(null, $mediumScreen, ($largeScreen - 1)) {
        @content;
    }
}
@mixin query-medium-up {
    @include mediaQuery($min, $mediumScreen) {
        @content;
    }
}
@mixin query-large-up {
    @include mediaQuery($min, $largeScreen) {
        @content;
    }
}
@mixin query-large {
    @include mediaQuery(null, $largeScreen, $xLargeScreen) {
        @content;
    }
}
@mixin query-xlarge-up {
    @include mediaQuery($min, $xLargeScreen) {
        @content;
    }
}

//
// Responsive Show/Hide Helpers
//  _____________________________________________
@include query-small {
    @include responsive-display-helper('small');
}
@include query-medium-down {
    @include responsive-display-helper('medium-down');
}
@include query-medium-up {
    @include responsive-display-helper('medium-up');
}
@include query-large-up {
    @include responsive-display-helper('large-up');
}

// Grid System
$grid-margin-reserve: 1px;
@mixin grid($size){
    box-sizing: border-box;
    width: percentage($size/12);
}
@mixin grid-padding(){
    padding-right: $grid-margin-reserve;
    padding-left: $grid-margin-reserve;
}
@mixin grid-margin($size){
    $width: percentage($size/12);
    box-sizing: border-box;
    width: calc(#{$width} - #{$grid-margin-reserve*2});
    margin-left: $grid-margin-reserve;
    margin-right: $grid-margin-reserve;
    margin-bottom: $grid-margin-reserve*2;
}
// Grid without margin
@mixin grid-col($size) {
    @include grid($size);
    @media (max-width: $screen__break){
        @if $size >= 4 {
            @include grid(12);
        }
        @if $size == 2 {
            @include grid(6);
        }
        @if $size == 1 {
            @include grid(3);
        }
    }
}
// Grid with margin
@mixin grid-col-with-margin($size) {
    @include grid-margin($size);
    @media (max-width: $screen__break){
        @if $size >= 4 {
            @include grid-margin(12);
        }
        @if $size == 3 {
            @include grid-margin(6);
        }
        @if $size == 2 {
            @include grid-margin(6);
        }
        @if $size == 1 {
            @include grid-margin(3);
        }
    }
}

// Animations
@mixin animate-hover {
    span {
        @include transition(all $slow);
        padding-bottom: 6px;
        border-bottom: 1px solid transparent;
        
    }
    &:hover span {
        border-color: inherit;
    }
}
@mixin horizontalScrollFlex {
  display: flex;
  flex-wrap: nowrap;
  overflow-x: auto; 
  -webkit-overflow-scrolling: touch; 
  -ms-overflow-style: -ms-autohiding-scrollbar; 
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin underlineAnimation(){
  
    position: relative;
    padding-bottom: 6px;

    &:before{
        content: "";
        position: absolute;
        width: 100%;
        height: 1px;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: $black;
        transform: translate3d(0,0,0);
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        -webkit-transition: transform 0.15s ease-in-out 0s;
        transition: transform 0.15s ease-in-out 0s;
    }

    &:hover:before{
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
    }

}

@mixin underline_animation($initialWidth: 0, $bottomDistance: 0){
  position: relative;
  &:before{
      content: "";
      width: $initialWidth;
      border-bottom:1px solid;
      position: absolute;
      left: 50%;
      bottom: $bottomDistance;
      opacity: 0;
      @include transform(translateX(-50%));
      @include transition(opacity $fast linear,width $fast linear);
  }
  &:hover,
  &.active{
    &:before{
      opacity: 1;
      width: 100%;
    }
  }
}

@mixin underline_animation_drop_title($initialWidth: 0, $bottomDistance: 0){

  & > a{
    position: relative;
    &:before{
        content: "";
        width: $initialWidth;
        border-bottom:1px solid;
        position: absolute;
        left: 50%;
        bottom: $bottomDistance;
        opacity: 0;
        @include transform(translateX(-50%));
        @include transition(opacity $fast linear,width $fast linear);
    }    
  }

  &:hover,
  &.active{
    & > a{
      &:before{
        opacity: 1;
        width: 100%;
      }      
    }
  }
}

@mixin replaceTextCSS ($textToReplace: '', $textSize: 15px, $textSeudoPosition: 'before'){
  font-size: 0;
  letter-spacing: 0;
  @if $textSeudoPosition == 'after' {
    &:after{
      content: $textToReplace;
      font-size: $textSize;
    }
  }
  @else{
    &:before{
      content: $textToReplace;
      font-size: $textSize;
    }
  }
}


/*---------- Helper End ----------*/